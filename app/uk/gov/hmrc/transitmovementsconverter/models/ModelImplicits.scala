/*
 * Copyright 2023 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.gov.hmrc.transitmovementsconverter.models

import generated.transitional._
import play.api.libs.json.JsError
import play.api.libs.json.JsNumber
import play.api.libs.json.JsObject
import play.api.libs.json.JsString
import play.api.libs.json.JsSuccess
import play.api.libs.json.Json
import play.api.libs.json.OFormat
import play.api.libs.json.Reads
import play.api.libs.json.Writes
import play.api.libs.json.Json.JsValueWrapper
import scalaxb.DataTypeFactory
import uk.gov.hmrc.transitmovementsconverter.models.ModelHelperMethods._
import uk.gov.hmrc.transitmovementsconverter.models.errors.MalformedJsonException

import javax.xml.datatype.XMLGregorianCalendar
import scala.util.Try
import scala.xml.TopScope

/** Here be dragons - be very careful when updating this class and make sure you test everything.
  *
  * While we are able to use scalaxb to ingest our XML files and create models, we still need to consider how
  * we're going to convert them into Json. The natural choice is Play Json, but unfortunately, due to the
  * compile time nature of implicits, we need to specify each case class as its own Format[A]. Now,
  * Play Json makes it easy to work with case classes thanks to the way that it uses Scala Macros to use the
  * apply and unapply methods ... mostly. Unfortunately, we need to specify the implicits for ALL classes we use,
  * not just those we directly use. To make matters worse, the ordering of our format implicits is somewhat sensitive
  * (so please be very careful when adding more formats - dependencies of a format go ABOVE that format).
  *
  * However, we cannot use the Json.format[_] macro for everything. For example, ConsignmentType20 has 24 fields,
  * and while a case class can be produced for it, because Scala 2 has a hard limit of 22 entries in a Tuple, it
  * doesn't create the unapply method that Play Json's format macros rely on. As a result, we have to create the
  * reads and writes manually. To add further insult to injury, unlike the autogenerated formats, we have to handle
  * empty optionals manually - which is why OptionHelpers#entry and SeqHelpers#entry exist.
  *
  * As the XSDs are updated, it is very likely that some of the below will break as the generated models will change
  * slightly.
  */
object ModelImplicits {

  implicit lazy val aesNctsP5FunctionalErrorCodesReads: Reads[AesNctsP5FunctionalErrorCodes] = Reads {
    case JsNumber(n) =>
      Try(JsSuccess(AesNctsP5FunctionalErrorCodes.fromString(n.toString, TopScope))).recover {
        case _: RuntimeException => JsError()
      }.get
    case JsString(s) =>
      Try(JsSuccess(AesNctsP5FunctionalErrorCodes.fromString(s, TopScope))).recover {
        case _: RuntimeException => JsError()
      }.get
    case _ => JsError()
  }

  implicit lazy val aesNctsP5FunctionalErrorCodesWrites: Writes[AesNctsP5FunctionalErrorCodes] = Writes {
    code =>
      JsString(code.toString)
  }

  implicit lazy val countryCodeReads: Reads[CountryCodesCustomsOfficeLists] = Reads {
    case JsString(s) =>
      Try(JsSuccess(CountryCodesCustomsOfficeLists.fromString(s, TopScope))).recover {
        case _: RuntimeException => JsError()
      }.get
    case _ => JsError()
  }

  implicit lazy val countryCodeWrites: Writes[CountryCodesCustomsOfficeLists] = Writes {
    code =>
      JsString(code.toString)
  }

  implicit lazy val flagReads: Reads[Flag] = Reads {
    case JsString(s) =>
      Try(JsSuccess(Flag.fromString(s, TopScope))).recover {
        case _: RuntimeException => JsError()
      }.get
    case JsNumber(n) if n.intValue == 1 => JsSuccess(Number1)
    case JsNumber(n) if n.intValue == 0 => JsSuccess(Number0)
    case _                              => JsError()
  }

  implicit lazy val flagWrites: Writes[Flag] = Writes {
    flag =>
      JsString(flag.toString)
  }

  implicit lazy val phaseIDtypeReads: Reads[PhaseIDtype] = Reads {
    case JsString(x) =>
      Try(JsSuccess(PhaseIDtype.fromString(x, TopScope))).recover {
        case _: RuntimeException => JsError()
      }.get
    case _ => JsError()
  }

  implicit lazy val phaseIDtypeWrites: Writes[PhaseIDtype] = Writes {
    phaseId =>
      JsString(phaseId.toString)
  }

  // Order sensitive - formats without dependencies should go first.

  implicit lazy val ctlControlTypeFormat: OFormat[CTLControlType] = Json.format[CTLControlType]

  implicit lazy val headerType01Format: OFormat[HeaderType01]                                     = Json.format[HeaderType01]
  implicit lazy val typeOfControlsTypeFormat: OFormat[TypeOfControlsType]                         = formatWithTypeAdjusted(Json.format[TypeOfControlsType])
  implicit lazy val requestedDocumentTypeFormat: OFormat[RequestedDocumentType]                   = Json.format[RequestedDocumentType]
  implicit lazy val commodityCodeType01Format: OFormat[CommodityCodeType01]                       = Json.format[CommodityCodeType01]
  implicit lazy val commodityCodeType02Format: OFormat[CommodityCodeType02]                       = Json.format[CommodityCodeType02]
  implicit lazy val commodityCodeType03Format: OFormat[CommodityCodeType03]                       = Json.format[CommodityCodeType03]
  implicit lazy val commodityCodeType05Format: OFormat[CommodityCodeType05]                       = Json.format[CommodityCodeType05]
  implicit lazy val commodityCodeType06Format: OFormat[CommodityCodeType06]                       = Json.format[CommodityCodeType06]
  implicit lazy val commodityCodeType07Format: OFormat[CommodityCodeType07]                       = Json.format[CommodityCodeType07]
  implicit lazy val dangerousGoodsType01Format: OFormat[DangerousGoodsType01]                     = Json.format[DangerousGoodsType01]
  implicit lazy val dangerousGoodsType02Format: OFormat[DangerousGoodsType02]                     = Json.format[DangerousGoodsType02]
  implicit lazy val goodsMeasureType02Format: OFormat[GoodsMeasureType02]                         = Json.format[GoodsMeasureType02]
  implicit lazy val goodsMeasureType03Format: OFormat[GoodsMeasureType03]                         = Json.format[GoodsMeasureType03]
  implicit lazy val goodsMeasureType04Format: OFormat[GoodsMeasureType04]                         = Json.format[GoodsMeasureType04]
  implicit lazy val goodsMeasureType06Format: OFormat[GoodsMeasureType06]                         = Json.format[GoodsMeasureType06]
  implicit lazy val goodsMeasureType07Format: OFormat[GoodsMeasureType07]                         = Json.format[GoodsMeasureType07]
  implicit lazy val commodityType02Format: OFormat[CommodityType02]                               = Json.format[CommodityType02]
  implicit lazy val commodityType03Format: OFormat[CommodityType03]                               = Json.format[CommodityType03]
  implicit lazy val commodityType05Format: OFormat[CommodityType05]                               = Json.format[CommodityType05]
  implicit lazy val commodityType06Format: OFormat[CommodityType06]                               = Json.format[CommodityType06]
  implicit lazy val commodityType07Format: OFormat[CommodityType07]                               = Json.format[CommodityType07]
  implicit lazy val commodityType08Format: OFormat[CommodityType08]                               = Json.format[CommodityType08]
  implicit lazy val commodityType12Format: OFormat[CommodityType12]                               = Json.format[CommodityType12]
  implicit lazy val commodityType13Format: OFormat[CommodityType13]                               = Json.format[CommodityType13]
  implicit lazy val additionalReferenceType01Format: OFormat[AdditionalReferenceType01]           = formatWithTypeAdjusted(Json.format[AdditionalReferenceType01])
  implicit lazy val additionalReferenceType02Format: OFormat[AdditionalReferenceType02]           = formatWithTypeAdjusted(Json.format[AdditionalReferenceType02])
  implicit lazy val additionalReferenceType03Format: OFormat[AdditionalReferenceType03]           = formatWithTypeAdjusted(Json.format[AdditionalReferenceType03])
  implicit lazy val additionalReferenceType04Format: OFormat[AdditionalReferenceType04]           = formatWithTypeAdjusted(Json.format[AdditionalReferenceType04])
  implicit lazy val additionalReferenceType05Format: OFormat[AdditionalReferenceType05]           = formatWithTypeAdjusted(Json.format[AdditionalReferenceType05])
  implicit lazy val additionalReferenceType06Format: OFormat[AdditionalReferenceType06]           = formatWithTypeAdjusted(Json.format[AdditionalReferenceType06])
  implicit lazy val addressType01Format: OFormat[AddressType01]                                   = Json.format[AddressType01]
  implicit lazy val addressType02Format: OFormat[AddressType02]                                   = Json.format[AddressType02]
  implicit lazy val addressType03Format: OFormat[AddressType03]                                   = Json.format[AddressType03]
  implicit lazy val addressType07Format: OFormat[AddressType07]                                   = Json.format[AddressType07]
  implicit lazy val addressType08Format: OFormat[AddressType08]                                   = Json.format[AddressType08]
  implicit lazy val addressType09Format: OFormat[AddressType09]                                   = Json.format[AddressType09]
  implicit lazy val addressType10Format: OFormat[AddressType10]                                   = Json.format[AddressType10]
  implicit lazy val addressType12Format: OFormat[AddressType12]                                   = Json.format[AddressType12]
  implicit lazy val addressType14Format: OFormat[AddressType14]                                   = Json.format[AddressType14]
  implicit lazy val addressType15Format: OFormat[AddressType15]                                   = Json.format[AddressType15]
  implicit lazy val addressType16Format: OFormat[AddressType16]                                   = Json.format[AddressType16]
  implicit lazy val addressType17Format: OFormat[AddressType17]                                   = Json.format[AddressType17]
  implicit lazy val addressType18Format: OFormat[AddressType18]                                   = Json.format[AddressType18]
  implicit lazy val departureTransportMeansType02: OFormat[DepartureTransportMeansType02]         = Json.format[DepartureTransportMeansType02]
  implicit lazy val departureTransportMeansType05: OFormat[DepartureTransportMeansType05]         = Json.format[DepartureTransportMeansType05]
  implicit lazy val sealType02Format: OFormat[SealType02]                                         = Json.format[SealType02]
  implicit lazy val sealType04Format: OFormat[SealType04]                                         = Json.format[SealType04]
  implicit lazy val sealType05Format: OFormat[SealType05]                                         = Json.format[SealType05]
  implicit lazy val packagingType01Format: OFormat[PackagingType01]                               = Json.format[PackagingType01]
  implicit lazy val packagingType02Format: OFormat[PackagingType02]                               = Json.format[PackagingType02]
  implicit lazy val packagingType03Format: OFormat[PackagingType03]                               = Json.format[PackagingType03]
  implicit lazy val packagingType04Format: OFormat[PackagingType04]                               = Json.format[PackagingType04]
  implicit lazy val additionalSupplyChainActorTypeFormat: OFormat[AdditionalSupplyChainActorType] = Json.format[AdditionalSupplyChainActorType]
  implicit lazy val previousDocumentType03Format: OFormat[PreviousDocumentType03]                 = formatWithTypeAdjusted(Json.format[PreviousDocumentType03])
  implicit lazy val previousDocumentType04Format: OFormat[PreviousDocumentType04]                 = formatWithTypeAdjusted(Json.format[PreviousDocumentType04])
  implicit lazy val previousDocumentType06Format: OFormat[PreviousDocumentType06]                 = formatWithTypeAdjusted(Json.format[PreviousDocumentType06])
  implicit lazy val previousDocumentType07Format: OFormat[PreviousDocumentType07]                 = formatWithTypeAdjusted(Json.format[PreviousDocumentType07])
  implicit lazy val previousDocumentType08Format: OFormat[PreviousDocumentType08]                 = formatWithTypeAdjusted(Json.format[PreviousDocumentType08])
  implicit lazy val previousDocumentType09Format: OFormat[PreviousDocumentType09]                 = formatWithTypeAdjusted(Json.format[PreviousDocumentType09])
  implicit lazy val previousDocumentType10Format: OFormat[PreviousDocumentType10]                 = formatWithTypeAdjusted(Json.format[PreviousDocumentType10])
  implicit lazy val supportingDocumentType02Format: OFormat[SupportingDocumentType02]             = formatWithTypeAdjusted(Json.format[SupportingDocumentType02])
  implicit lazy val supportingDocumentType03Format: OFormat[SupportingDocumentType03]             = formatWithTypeAdjusted(Json.format[SupportingDocumentType03])
  implicit lazy val supportingDocumentType04Format: OFormat[SupportingDocumentType04]             = formatWithTypeAdjusted(Json.format[SupportingDocumentType04])
  implicit lazy val supportingDocumentType05Format: OFormat[SupportingDocumentType05]             = formatWithTypeAdjusted(Json.format[SupportingDocumentType05])
  implicit lazy val supportingDocumentType06Format: OFormat[SupportingDocumentType06]             = formatWithTypeAdjusted(Json.format[SupportingDocumentType06])
  implicit lazy val transportDocumentType01Format: OFormat[TransportDocumentType01]               = formatWithTypeAdjusted(Json.format[TransportDocumentType01])
  implicit lazy val transportDocumentType02Format: OFormat[TransportDocumentType02]               = formatWithTypeAdjusted(Json.format[TransportDocumentType02])
  implicit lazy val transportDocumentType03Format: OFormat[TransportDocumentType03]               = formatWithTypeAdjusted(Json.format[TransportDocumentType03])
  implicit lazy val transportDocumentType04Format: OFormat[TransportDocumentType04]               = formatWithTypeAdjusted(Json.format[TransportDocumentType04])
  implicit lazy val additionalInformationType02Format: OFormat[AdditionalInformationType02]       = Json.format[AdditionalInformationType02]
  implicit lazy val additionalInformationType03Format: OFormat[AdditionalInformationType03]       = Json.format[AdditionalInformationType03]
  implicit lazy val transportChargesTypeFormat: OFormat[TransportChargesType]                     = Json.format[TransportChargesType]
  implicit lazy val controlResultType02Format: OFormat[ControlResultType02]                       = Json.format[ControlResultType02]
  implicit lazy val recoveryNotificationTypeFormat: OFormat[RecoveryNotificationType]             = Json.format[RecoveryNotificationType]

  implicit lazy val customsOfficeOfRecoveryAtDepartureType01Format: OFormat[CustomsOfficeOfRecoveryAtDepartureType01] =
    Json.format[CustomsOfficeOfRecoveryAtDepartureType01]
  implicit lazy val invalidGuaranteeReasonType01Format: OFormat[InvalidGuaranteeReasonType01] = Json.format[InvalidGuaranteeReasonType01]

  implicit lazy val customsOfficeType01Format: OFormat[CustomsOfficeType01]                                 = Json.format[CustomsOfficeType01]
  implicit lazy val customsOfficeType02Format: OFormat[CustomsOfficeType02]                                 = Json.format[CustomsOfficeType02]
  implicit lazy val gnssTypeFormat: OFormat[GNSSType]                                                       = Json.format[GNSSType]
  implicit lazy val economicOperatorType01Format: OFormat[EconomicOperatorType01]                           = Json.format[EconomicOperatorType01]
  implicit lazy val economicOperatorType03Format: OFormat[EconomicOperatorType03]                           = Json.format[EconomicOperatorType03]
  implicit lazy val postcodeAddressType01Format: OFormat[PostcodeAddressType01]                             = Json.format[PostcodeAddressType01]
  implicit lazy val postcodeAddressType02Format: OFormat[PostcodeAddressType02]                             = Json.format[PostcodeAddressType02]
  implicit lazy val contactPersonType01Format: OFormat[ContactPersonType01]                                 = Json.format[ContactPersonType01]
  implicit lazy val contactPersonType02Format: OFormat[ContactPersonType02]                                 = Json.format[ContactPersonType02]
  implicit lazy val contactPersonType04Format: OFormat[ContactPersonType04]                                 = Json.format[ContactPersonType04]
  implicit lazy val contactPersonType05Format: OFormat[ContactPersonType05]                                 = Json.format[ContactPersonType05]
  implicit lazy val contactPersonType06Format: OFormat[ContactPersonType06]                                 = Json.format[ContactPersonType06]
  implicit lazy val guaranteeReferenceType01: OFormat[GuaranteeReferenceType01]                             = Json.format[GuaranteeReferenceType01]
  implicit lazy val guaranteeReferenceType03: OFormat[GuaranteeReferenceType03]                             = Json.format[GuaranteeReferenceType03]
  implicit lazy val guaranteeReferenceType08: OFormat[GuaranteeReferenceType08]                             = Json.format[GuaranteeReferenceType08]
  implicit lazy val guaranteeReferenceType16: OFormat[GuaranteeReferenceType16]                             = Json.format[GuaranteeReferenceType16]
  implicit lazy val carrierType03Format: OFormat[CarrierType03]                                             = Json.format[CarrierType03]
  implicit lazy val carrierType04Format: OFormat[CarrierType04]                                             = Json.format[CarrierType04]
  implicit lazy val consignorType03Format: OFormat[ConsignorType03]                                         = Json.format[ConsignorType03]
  implicit lazy val consignorType04Format: OFormat[ConsignorType04]                                         = Json.format[ConsignorType04]
  implicit lazy val consignorType05Format: OFormat[ConsignorType05]                                         = Json.format[ConsignorType05]
  implicit lazy val consignorType06Format: OFormat[ConsignorType06]                                         = Json.format[ConsignorType06]
  implicit lazy val consignorType07Format: OFormat[ConsignorType07]                                         = Json.format[ConsignorType07]
  implicit lazy val consigneeType03Format: OFormat[ConsigneeType03]                                         = Json.format[ConsigneeType03]
  implicit lazy val consigneeType02Format: OFormat[ConsigneeType02]                                         = Json.format[ConsigneeType02]
  implicit lazy val consigneeType04Format: OFormat[ConsigneeType04]                                         = Json.format[ConsigneeType04]
  implicit lazy val consigneeType05Format: OFormat[ConsigneeType05]                                         = Json.format[ConsigneeType05]
  implicit lazy val consigneeType08Format: OFormat[ConsigneeType08]                                         = Json.format[ConsigneeType08]
  implicit lazy val consignmentItemType02Format: OFormat[ConsignmentItemType02]                             = Json.format[ConsignmentItemType02]
  implicit lazy val consignmentItemType03Format: OFormat[ConsignmentItemType03]                             = Json.format[ConsignmentItemType03]
  implicit lazy val consignmentItemType04Format: OFormat[ConsignmentItemType04]                             = Json.format[ConsignmentItemType04]
  implicit lazy val consignmentItemType05Format: OFormat[ConsignmentItemType05]                             = Json.format[ConsignmentItemType05]
  implicit lazy val consignmentItemType08Format: OFormat[ConsignmentItemType08]                             = Json.format[ConsignmentItemType08]
  implicit lazy val consignmentItemType09Format: OFormat[ConsignmentItemType09]                             = Json.format[ConsignmentItemType09]
  implicit lazy val departureTransportMeansType03Format: OFormat[DepartureTransportMeansType03]             = Json.format[DepartureTransportMeansType03]
  implicit lazy val departureTransportMeansType04Format: OFormat[DepartureTransportMeansType04]             = Json.format[DepartureTransportMeansType04]
  implicit lazy val departureTransportMeansType07Format: OFormat[DepartureTransportMeansType07]             = Json.format[DepartureTransportMeansType07]
  implicit lazy val departureTransportMeansType08Format: OFormat[DepartureTransportMeansType08]             = Json.format[DepartureTransportMeansType08]
  implicit lazy val houseConsignmentType02Format: OFormat[HouseConsignmentType02]                           = Json.format[HouseConsignmentType02]
  implicit lazy val houseConsignmentType03Format: OFormat[HouseConsignmentType03]                           = Json.format[HouseConsignmentType03]
  implicit lazy val houseConsignmentType04Format: OFormat[HouseConsignmentType04]                           = Json.format[HouseConsignmentType04]
  implicit lazy val houseConsignmentType05Format: OFormat[HouseConsignmentType05]                           = Json.format[HouseConsignmentType05]
  implicit lazy val houseConsignmentType06Format: OFormat[HouseConsignmentType06]                           = Json.format[HouseConsignmentType06]
  implicit lazy val houseConsignmentType10Format: OFormat[HouseConsignmentType10]                           = Json.format[HouseConsignmentType10]
  implicit lazy val transportMeansType01Format: OFormat[TransportMeansType01]                               = Json.format[TransportMeansType01]
  implicit lazy val transportMeansType02Format: OFormat[TransportMeansType02]                               = Json.format[TransportMeansType02]
  implicit lazy val goodsReferenceType01Format: OFormat[GoodsReferenceType01]                               = Json.format[GoodsReferenceType01]
  implicit lazy val goodsReferenceType02Format: OFormat[GoodsReferenceType02]                               = Json.format[GoodsReferenceType02]
  implicit lazy val transhipmentType01Format: OFormat[TranshipmentType01]                                   = Json.format[TranshipmentType01]
  implicit lazy val transhipmentType02Format: OFormat[TranshipmentType02]                                   = Json.format[TranshipmentType02]
  implicit lazy val transportEquipmentType01Format: OFormat[TransportEquipmentType01]                       = Json.format[TransportEquipmentType01]
  implicit lazy val transportEquipmentType03Format: OFormat[TransportEquipmentType03]                       = Json.format[TransportEquipmentType03]
  implicit lazy val transportEquipmentType05Format: OFormat[TransportEquipmentType05]                       = Json.format[TransportEquipmentType05]
  implicit lazy val transportEquipmentType06Format: OFormat[TransportEquipmentType06]                       = Json.format[TransportEquipmentType06]
  implicit lazy val transportEquipmentType07Format: OFormat[TransportEquipmentType07]                       = Json.format[TransportEquipmentType07]
  implicit lazy val locationOfGoodsType01Format: OFormat[LocationOfGoodsType01]                             = Json.format[LocationOfGoodsType01]
  implicit lazy val locationOfGoodsType02Format: OFormat[LocationOfGoodsType02]                             = Json.format[LocationOfGoodsType02]
  implicit lazy val locationOfGoodsType03Format: OFormat[LocationOfGoodsType03]                             = Json.format[LocationOfGoodsType03]
  implicit lazy val locationOfGoodsType05Format: OFormat[LocationOfGoodsType05]                             = Json.format[LocationOfGoodsType05]
  implicit lazy val countryOfRoutingOfConsignmentType01Format: OFormat[CountryOfRoutingOfConsignmentType01] = Json.format[CountryOfRoutingOfConsignmentType01]
  implicit lazy val activeBorderTransportMeansType01Format: OFormat[ActiveBorderTransportMeansType01]       = Json.format[ActiveBorderTransportMeansType01]
  implicit lazy val activeBorderTransportMeansType02Format: OFormat[ActiveBorderTransportMeansType02]       = Json.format[ActiveBorderTransportMeansType02]
  implicit lazy val activeBorderTransportMeansType03Format: OFormat[ActiveBorderTransportMeansType03]       = Json.format[ActiveBorderTransportMeansType03]
  implicit lazy val placeOfLoadingType02Format: OFormat[PlaceOfLoadingType02]                               = Json.format[PlaceOfLoadingType02]
  implicit lazy val placeOfLoadingType03Format: OFormat[PlaceOfLoadingType03]                               = Json.format[PlaceOfLoadingType03]
  implicit lazy val placeOfUnloadingType01Format: OFormat[PlaceOfUnloadingType01]                           = Json.format[PlaceOfUnloadingType01]
  implicit lazy val placeOfUnloadingType02Format: OFormat[PlaceOfUnloadingType02]                           = Json.format[PlaceOfUnloadingType02]

  implicit lazy val endorsementType01Format: OFormat[EndorsementType01] = Json.format[EndorsementType01]
  implicit lazy val endorsementType03Format: OFormat[EndorsementType03] = Json.format[EndorsementType03]
  implicit lazy val locationType01Format: OFormat[LocationType01]       = Json.format[LocationType01]
  implicit lazy val locationType02Format: OFormat[LocationType02]       = Json.format[LocationType02]
  implicit lazy val incidentType01Format: OFormat[IncidentType01]       = Json.format[IncidentType01]
  implicit lazy val incidentType03Format: OFormat[IncidentType03]       = Json.format[IncidentType03]
  implicit lazy val incidentType04Format: OFormat[IncidentType04]       = Json.format[IncidentType04]

  implicit lazy val consigneeActualType01Format: OFormat[ConsigneeActualType01] = Json.format[ConsigneeActualType01]
  implicit lazy val enquiryTypeFormat: OFormat[EnquiryType01]                   = Json.format[EnquiryType01]

  implicit lazy val functionalErrorType02Format: OFormat[FunctionalErrorType02]                           = Json.format[FunctionalErrorType02]
  implicit lazy val functionalErrorType04Format: OFormat[FunctionalErrorType04]                           = Json.format[FunctionalErrorType04]
  implicit lazy val invalidationType01Format: OFormat[InvalidationType01]                                 = Json.format[InvalidationType01]
  implicit lazy val invalidationType02Format: OFormat[InvalidationType02]                                 = Json.format[InvalidationType02]
  implicit lazy val transitOperationType01Format: OFormat[TransitOperationType01]                         = Json.format[TransitOperationType01]
  implicit lazy val transitOperationType02Format: OFormat[TransitOperationType02]                         = Json.format[TransitOperationType02]
  implicit lazy val transitOperationType03Format: OFormat[TransitOperationType03]                         = Json.format[TransitOperationType03]
  implicit lazy val transitOperationType04Format: OFormat[TransitOperationType04]                         = Json.format[TransitOperationType04]
  implicit lazy val transitOperationType05Format: OFormat[TransitOperationType05]                         = Json.format[TransitOperationType05]
  implicit lazy val transitOperationType06Format: OFormat[TransitOperationType06]                         = Json.format[TransitOperationType06]
  implicit lazy val transitOperationType08Format: OFormat[TransitOperationType08]                         = Json.format[TransitOperationType08]
  implicit lazy val transitOperationType10Format: OFormat[TransitOperationType10]                         = Json.format[TransitOperationType10]
  implicit lazy val transitOperationType11Format: OFormat[TransitOperationType11]                         = Json.format[TransitOperationType11]
  implicit lazy val transitOperationType12Format: OFormat[TransitOperationType12]                         = Json.format[TransitOperationType12]
  implicit lazy val transitOperationType14Format: OFormat[TransitOperationType14]                         = Json.format[TransitOperationType14]
  implicit lazy val transitOperationType15Format: OFormat[TransitOperationType15]                         = Json.format[TransitOperationType15]
  implicit lazy val transitOperationType16Format: OFormat[TransitOperationType16]                         = Json.format[TransitOperationType16]
  implicit lazy val transitOperationType18Format: OFormat[TransitOperationType18]                         = Json.format[TransitOperationType18]
  implicit lazy val transitOperationType19Format: OFormat[TransitOperationType19]                         = Json.format[TransitOperationType19]
  implicit lazy val transitOperationType20Format: OFormat[TransitOperationType20]                         = Json.format[TransitOperationType20]
  implicit lazy val transitOperationType21Format: OFormat[TransitOperationType21]                         = Json.format[TransitOperationType21]
  implicit lazy val transitOperationType22Format: OFormat[TransitOperationType22]                         = Json.format[TransitOperationType22]
  implicit lazy val transitOperationType23Format: OFormat[TransitOperationType23]                         = Json.format[TransitOperationType23]
  implicit lazy val transitOperationType24Format: OFormat[TransitOperationType24]                         = Json.format[TransitOperationType24]
  implicit lazy val transitOperationType26Format: OFormat[TransitOperationType26]                         = Json.format[TransitOperationType26]
  implicit lazy val transitOperationType43Format: OFormat[TransitOperationType43]                         = Json.format[TransitOperationType43]
  implicit lazy val transitOperationType47Format: OFormat[TransitOperationType47]                         = Json.format[TransitOperationType47]
  implicit lazy val transitOperationType48Format: OFormat[TransitOperationType48]                         = Json.format[TransitOperationType48]
  implicit lazy val authorisationType01Format: OFormat[AuthorisationType01]                               = formatWithTypeAdjusted(Json.format[AuthorisationType01])
  implicit lazy val authorisationType02Format: OFormat[AuthorisationType02]                               = formatWithTypeAdjusted(Json.format[AuthorisationType02])
  implicit lazy val authorisationType03Format: OFormat[AuthorisationType03]                               = formatWithTypeAdjusted(Json.format[AuthorisationType03])
  implicit lazy val customsOfficeOfDepartureType03Format: OFormat[CustomsOfficeOfDepartureType03]         = Json.format[CustomsOfficeOfDepartureType03]
  implicit lazy val customsOfficeOfEnquiryAtDeparture01: OFormat[CustomsOfficeOfEnquiryAtDepartureType01] = Json.format[CustomsOfficeOfEnquiryAtDepartureType01]

  implicit lazy val customsOfficeOfDestinationDeclaredType01Format: OFormat[CustomsOfficeOfDestinationDeclaredType01] =
    Json.format[CustomsOfficeOfDestinationDeclaredType01]

  implicit lazy val customsOfficeOfTransitDeclaredType04Format: OFormat[CustomsOfficeOfTransitDeclaredType04] =
    Json.format[CustomsOfficeOfTransitDeclaredType04]

  implicit lazy val customsOfficeOfExitForTransitDeclaredType02Format: OFormat[CustomsOfficeOfExitForTransitDeclaredType02] =
    Json.format[CustomsOfficeOfExitForTransitDeclaredType02]

  implicit lazy val customsOfficeOfDestinationActualType01Format: OFormat[CustomsOfficeOfDestinationActualType01] =
    Json.format[CustomsOfficeOfDestinationActualType01]

  implicit lazy val customsOfficeOfDestinationActualType03Format: OFormat[CustomsOfficeOfDestinationActualType03] =
    Json.format[CustomsOfficeOfDestinationActualType03]

  implicit lazy val customsOfficeOfIncidentRegistration02Format: OFormat[CustomsOfficeOfIncidentRegistrationType02] =
    Json.format[CustomsOfficeOfIncidentRegistrationType02]
  implicit lazy val holderOfTheTransitProcedureType02Format: OFormat[HolderOfTheTransitProcedureType02] = Json.format[HolderOfTheTransitProcedureType02]
  implicit lazy val holderOfTheTransitProcedureType05Format: OFormat[HolderOfTheTransitProcedureType05] = Json.format[HolderOfTheTransitProcedureType05]
  implicit lazy val holderOfTheTransitProcedureType06Format: OFormat[HolderOfTheTransitProcedureType06] = Json.format[HolderOfTheTransitProcedureType06]
  implicit lazy val holderOfTheTransitProcedureType07Format: OFormat[HolderOfTheTransitProcedureType07] = Json.format[HolderOfTheTransitProcedureType07]
  implicit lazy val holderOfTheTransitProcedureType08Format: OFormat[HolderOfTheTransitProcedureType08] = Json.format[HolderOfTheTransitProcedureType08]
  implicit lazy val holderOfTheTransitProcedureType13Format: OFormat[HolderOfTheTransitProcedureType13] = Json.format[HolderOfTheTransitProcedureType13]
  implicit lazy val holderOfTheTransitProcedureType14Format: OFormat[HolderOfTheTransitProcedureType14] = Json.format[HolderOfTheTransitProcedureType14]
  implicit lazy val holderOfTheTransitProcedureType15Format: OFormat[HolderOfTheTransitProcedureType15] = Json.format[HolderOfTheTransitProcedureType15]
  implicit lazy val holderOfTheTransitProcedureType19Format: OFormat[HolderOfTheTransitProcedureType19] = Json.format[HolderOfTheTransitProcedureType19]
  implicit lazy val holderOfTheTransitProcedureType20Format: OFormat[HolderOfTheTransitProcedureType20] = Json.format[HolderOfTheTransitProcedureType20]
  implicit lazy val traderAtDestinationType01Format: OFormat[TraderAtDestinationType01]                 = Json.format[TraderAtDestinationType01]
  implicit lazy val traderAtDestinationType02Format: OFormat[TraderAtDestinationType02]                 = Json.format[TraderAtDestinationType02]
  implicit lazy val traderAtDestinationType03Format: OFormat[TraderAtDestinationType03]                 = Json.format[TraderAtDestinationType03]
  implicit lazy val representativeType01Format: OFormat[RepresentativeType01]                           = Json.format[RepresentativeType01]
  implicit lazy val representativeType02Format: OFormat[RepresentativeType02]                           = Json.format[RepresentativeType02]
  implicit lazy val representativeType03Format: OFormat[RepresentativeType03]                           = Json.format[RepresentativeType03]
  implicit lazy val representativeType04Format: OFormat[RepresentativeType04]                           = Json.format[RepresentativeType04]
  implicit lazy val representativeType05Format: OFormat[RepresentativeType05]                           = Json.format[RepresentativeType05]
  implicit lazy val guaranteeType01Format: OFormat[GuaranteeType01]                                     = Json.format[GuaranteeType01]
  implicit lazy val guaranteeType02Format: OFormat[GuaranteeType02]                                     = Json.format[GuaranteeType02]
  implicit lazy val guaranteeType03Format: OFormat[GuaranteeType03]                                     = Json.format[GuaranteeType03]
  implicit lazy val guarantorType06Format: OFormat[GuarantorType06]                                     = Json.format[GuarantorType06]
  implicit lazy val consignmentType01Format: OFormat[ConsignmentType01]                                 = Json.format[ConsignmentType01]
  implicit lazy val consignmentType03Format: OFormat[ConsignmentType03]                                 = Json.format[ConsignmentType03]
  implicit lazy val consignmentType05Format: OFormat[ConsignmentType05]                                 = Json.format[ConsignmentType05]
  implicit lazy val consignmentType06Format: OFormat[ConsignmentType06]                                 = Json.format[ConsignmentType06]
  implicit lazy val consignmentType07Format: OFormat[ConsignmentType07]                                 = Json.format[ConsignmentType07]
  implicit lazy val consignmentType08Format: OFormat[ConsignmentType08]                                 = Json.format[ConsignmentType08]
  implicit lazy val consignmentType22Format: OFormat[ConsignmentType22]                                 = Json.format[ConsignmentType22]

  implicit lazy val unloadingRemarkFormat: OFormat[UnloadingRemarkType] = Json.format[UnloadingRemarkType]

  // Due to various ConsignmentTypes having more than 22 fields, and that Scala 2.12 (and 2.13) only supports Tuples of up to 22 fields,
  // we can't use the standard unapply (as it is not generated).
  //
  // This means we have to do this by constructing a Json object...

  implicit lazy val consignmentType04Reads: Reads[ConsignmentType04] = Reads {
    case x: JsObject =>
      JsSuccess(
        ConsignmentType04(
          (x \ "countryOfDispatch").asOptionString,
          (x \ "countryOfDestination").asOptionString,
          (x \ "containerIndicator").asOption[Flag],
          (x \ "inlandModeOfTransport").asOptionString,
          (x \ "modeOfTransportAtTheBorder").asOptionString,
          (x \ "grossMass").as[BigDecimal],
          (x \ "referenceNumberUCR").asOptionString,
          (x \ "Carrier").asOption[CarrierType03],
          (x \ "Consignor").asOption[ConsignorType03],
          (x \ "Consignee").asOption[ConsigneeType04],
          (x \ "AdditionalSupplyChainActor").asSeq[AdditionalSupplyChainActorType],
          (x \ "TransportEquipment").asSeq[TransportEquipmentType05],
          (x \ "LocationOfGoods").asOption[LocationOfGoodsType02],
          (x \ "DepartureTransportMeans").asSeq[DepartureTransportMeansType07],
          (x \ "CountryOfRoutingOfConsignment").asSeq[CountryOfRoutingOfConsignmentType01],
          (x \ "ActiveBorderTransportMeans").asSeq[ActiveBorderTransportMeansType01],
          (x \ "PlaceOfLoading").asOption[PlaceOfLoadingType02],
          (x \ "PlaceOfUnloading").asOption[PlaceOfUnloadingType02],
          (x \ "PreviousDocument").asSeq[PreviousDocumentType06],
          (x \ "SupportingDocument").asSeq[SupportingDocumentType06],
          (x \ "TransportDocument").asSeq[TransportDocumentType02],
          (x \ "AdditionalReference").asSeq[AdditionalReferenceType03],
          (x \ "AdditionalInformation").asSeq[AdditionalInformationType02],
          (x \ "TransportCharges").asOption[TransportChargesType],
          (x \ "HouseConsignment").asSeq[HouseConsignmentType03]
        )
      )
    case _ => throw MalformedJsonException("ConsignmentType04 is not an object")
  }

  implicit lazy val consignmentType04Writes: Writes[ConsignmentType04] = Writes {
    consignmentType20 =>
      val seq: Seq[(String, JsValueWrapper)] = Seq.empty[(String, JsValueWrapper)] ++
        consignmentType20.countryOfDispatch.entry("countryOfDispatch") ++
        consignmentType20.countryOfDestination.entry("countryOfDestination") ++
        Seq[(String, JsValueWrapper)]("containerIndicator" -> consignmentType20.containerIndicator) ++
        consignmentType20.inlandModeOfTransport.entry("inlandModeOfTransport") ++
        consignmentType20.modeOfTransportAtTheBorder.entry("modeOfTransportAtTheBorder") ++
        Seq[(String, JsValueWrapper)]("grossMass" -> consignmentType20.grossMass) ++
        consignmentType20.referenceNumberUCR.entry("referenceNumberUCR") ++
        consignmentType20.Carrier.entry("Carrier") ++
        consignmentType20.Consignor.entry("Consignor") ++
        consignmentType20.Consignee.entry("Consignee") ++
        consignmentType20.AdditionalSupplyChainActor.entry("AdditionalSupplyChainActor") ++
        consignmentType20.TransportEquipment.entry("TransportEquipment") ++
        consignmentType20.LocationOfGoods.entry("LocationOfGoods") ++
        consignmentType20.DepartureTransportMeans.entry("DepartureTransportMeans") ++
        consignmentType20.CountryOfRoutingOfConsignment.entry("CountryOfRoutingOfConsignment") ++
        consignmentType20.ActiveBorderTransportMeans.entry("ActiveBorderTransportMeans") ++
        consignmentType20.PlaceOfLoading.entry("PlaceOfLoading") ++
        consignmentType20.PlaceOfUnloading.entry("PlaceOfUnloading") ++
        consignmentType20.PreviousDocument.entry("PreviousDocument") ++
        consignmentType20.SupportingDocument.entry("SupportingDocument") ++
        consignmentType20.TransportDocument.entry("TransportDocument") ++
        consignmentType20.AdditionalReference.entry("AdditionalReference") ++
        consignmentType20.AdditionalInformation.entry("AdditionalInformation") ++
        consignmentType20.TransportCharges.entry("TransportCharges") ++
        consignmentType20.HouseConsignment.entry("HouseConsignment")

      Json.obj(seq: _*)
  }

  implicit lazy val consignmentType20Reads: Reads[ConsignmentType20] = Reads {
    case x: JsObject =>
      JsSuccess(
        ConsignmentType20(
          (x \ "countryOfDispatch").asOptionString,
          (x \ "countryOfDestination").asOptionString,
          (x \ "containerIndicator").asOption[Flag],
          (x \ "inlandModeOfTransport").asOptionString,
          (x \ "modeOfTransportAtTheBorder").asOptionString,
          (x \ "grossMass").as[BigDecimal],
          (x \ "referenceNumberUCR").asOptionString,
          (x \ "Carrier").asOption[CarrierType04],
          (x \ "Consignor").asOption[ConsignorType07],
          (x \ "Consignee").asOption[ConsigneeType05],
          (x \ "AdditionalSupplyChainActor").asSeq[AdditionalSupplyChainActorType],
          (x \ "TransportEquipment").asSeq[TransportEquipmentType06],
          (x \ "LocationOfGoods").asOption[LocationOfGoodsType05],
          (x \ "DepartureTransportMeans").asSeq[DepartureTransportMeansType03],
          (x \ "CountryOfRoutingOfConsignment").asSeq[CountryOfRoutingOfConsignmentType01],
          (x \ "ActiveBorderTransportMeans").asSeq[ActiveBorderTransportMeansType02],
          (x \ "PlaceOfLoading").asOption[PlaceOfLoadingType03],
          (x \ "PlaceOfUnloading").asOption[PlaceOfUnloadingType01],
          (x \ "PreviousDocument").asSeq[PreviousDocumentType09],
          (x \ "SupportingDocument").asSeq[SupportingDocumentType05],
          (x \ "TransportDocument").asSeq[TransportDocumentType04],
          (x \ "AdditionalReference").asSeq[AdditionalReferenceType05],
          (x \ "AdditionalInformation").asSeq[AdditionalInformationType03],
          (x \ "TransportCharges").asOption[TransportChargesType],
          (x \ "HouseConsignment").asSeq[HouseConsignmentType10]
        )
      )
    case _ => throw MalformedJsonException("ConsignmentType20 is not an object")
  }

  implicit lazy val consignmentType20Writes: Writes[ConsignmentType20] = Writes {
    consignmentType20 =>
      val seq: Seq[(String, JsValueWrapper)] = Seq.empty[(String, JsValueWrapper)] ++
        consignmentType20.countryOfDispatch.entry("countryOfDispatch") ++
        consignmentType20.countryOfDestination.entry("countryOfDestination") ++
        consignmentType20.containerIndicator.entry("containerIndicator") ++
        consignmentType20.inlandModeOfTransport.entry("inlandModeOfTransport") ++
        consignmentType20.modeOfTransportAtTheBorder.entry("modeOfTransportAtTheBorder") ++
        Seq[(String, JsValueWrapper)]("grossMass" -> consignmentType20.grossMass) ++
        consignmentType20.referenceNumberUCR.entry("referenceNumberUCR") ++
        consignmentType20.Carrier.entry("Carrier") ++
        consignmentType20.Consignor.entry("Consignor") ++
        consignmentType20.Consignee.entry("Consignee") ++
        consignmentType20.AdditionalSupplyChainActor.entry("AdditionalSupplyChainActor") ++
        consignmentType20.TransportEquipment.entry("TransportEquipment") ++
        consignmentType20.LocationOfGoods.entry("LocationOfGoods") ++
        consignmentType20.DepartureTransportMeans.entry("DepartureTransportMeans") ++
        consignmentType20.CountryOfRoutingOfConsignment.entry("CountryOfRoutingOfConsignment") ++
        consignmentType20.ActiveBorderTransportMeans.entry("ActiveBorderTransportMeans") ++
        consignmentType20.PlaceOfLoading.entry("PlaceOfLoading") ++
        consignmentType20.PlaceOfUnloading.entry("PlaceOfUnloading") ++
        consignmentType20.PreviousDocument.entry("PreviousDocument") ++
        consignmentType20.SupportingDocument.entry("SupportingDocument") ++
        consignmentType20.TransportDocument.entry("TransportDocument") ++
        consignmentType20.AdditionalReference.entry("AdditionalReference") ++
        consignmentType20.AdditionalInformation.entry("AdditionalInformation") ++
        consignmentType20.TransportCharges.entry("TransportCharges") ++
        consignmentType20.HouseConsignment.entry("HouseConsignment")

      Json.obj(seq: _*)
  }

  implicit lazy val xmlDateTimeWrites: Writes[XMLGregorianCalendar] = Writes {
    dateTime =>
      JsString(dateTime.toXMLFormat)
  }

  implicit lazy val xmlDateTimeReads: Reads[XMLGregorianCalendar] = Reads {
    case JsString(dateTime) => Try(JsSuccess(DataTypeFactory.initialValue().newXMLGregorianCalendar(dateTime))).getOrElse(JsError())
    case _                  => JsError()
  }

  implicit lazy val messageTypesReads: Reads[MessageTypes] = Reads {
    case JsString(messageType) =>
      Try(generated.transitional.MessageTypes.fromString(messageType, TopScope))
        .map(
          x => JsSuccess(x)
        )
        .getOrElse(JsError())
    case _ => JsError()
  }

  implicit lazy val messageTypesWrites: Writes[MessageTypes] = Writes {
    x =>
      JsString(x.toString)
  }

}
